module type_141
   use iso_fortran_env, only: int32, int64, real32, real64
   use read_ascii_pd, only: read_pd
   use count_pd, only: count_pd_entries
   use type_128
   !use type_126

   implicit none

   private

   type, public :: t_141_dir
      integer(int32) :: entity_type_num1 = 0
      integer(int32) :: parameter_data = 0
      integer(int32) :: structure = 0
      integer(int32) :: line_font = 0
      integer(int32) :: level = 0
      integer(int32) :: view = 0
      integer(int32) :: transform_matrix = 0
      integer(int32) :: label_disp_assoc = 0
      integer(int32) :: status_number = 0
      integer(int32) :: sequence_num1 = 0
      integer(int32) :: entity_type_num2 = 0
      integer(int32) :: line_weight = 0
      integer(int32) :: color_number = 0
      integer(int32) :: param_line_count = 0
      integer(int32) :: form_number = 0
      integer(int32) :: reserved_16 = 0
      integer(int32) :: reserved_17 = 0
      integer(int32) :: entity_label = 0
      integer(int32) :: entity_subscript = 0
      integer(int32) :: sequence_num2 = 0
   end type t_141_dir

   type, public :: t_141_pd
      integer(int32)              :: Type_BS = 0
      integer(int32)              :: PREF = 0
      integer(int32)              :: SPTR = 0
      integer(int32)              :: N = 0
      integer(int32)              :: CRVPT_1 = 0
      integer(int32)              :: SENSE_1 = 0
      integer(int32)              :: K1 = 0
      integer(int32)              :: CRVPT_N = 0
      integer(int32)              :: SENSE_N = 0
      integer(int32)              :: K_N = 0
      integer(int32)              :: iCRVPT_N = 0
      integer(int32)              :: iSENSE_N = 0
      integer(int32)              :: iK_N = 0
      integer(int32)              :: iPSCPT_1_1 = 0
      integer(int32)              :: iPSCPT_1_K1 = 0
      integer(int32)              :: iPSCPT_N_1 = 0
      integer(int32)              :: iPSCPT_N_KN = 0
      integer(int32)              :: n_PSCPT_1_K = 0
      integer(int32)              :: n_PSCPT_N_K = 0
      integer(int32), allocatable :: PSCPT_1_K(:)
      integer(int32), allocatable :: PSCPT_N_K(:)
   end type t_141_pd

   type, public :: t_141_metadata
      integer(int32)              :: Type_ID = 0
      integer(int32)              :: M = 0
      character(len=4000)         :: ascii_t141_pd_data = ''
      integer(int32)              :: num_PD_entries = 0
      integer(int32), allocatable :: Parameter_Data(:)
   end type t_141_metadata

   type, private :: t_141_sharedata
      integer(int32) :: fileunit = 0
      integer(int32) :: D_section_start_index = 0
      integer(int32) :: P_section_start_index = 0
   end type t_141_sharedata

   type, public :: t_141
      type(t_141_dir)        :: t141dir
      type(t_141_pd)         :: t141param
      type(t_141_metadata)   :: t141metadata
      type(t_141_sharedata)  :: t141sharedata
   contains
      procedure :: test
      !procedure :: exchange_sharedata_t141 => exchange_share
      ! procedure :: read_t128_dir_entries => read_entries
      ! procedure :: read_ascii_t128_pd => read_ascii_pd
      ! procedure :: allocate_t128_pd_initial => allocate_pd_initial
      ! procedure :: read_t128pd_integers => read_pd_integers
      ! procedure :: t128_index_calculations => index_calcs
      ! procedure :: allocate_t128_pd_vectors => allocate_pd_vectors
      ! procedure :: initialize_t128_pd_vectors => initialize_pd_vectors
      ! procedure :: read_in_t128_pd_data => read_in_pd_data
      ! procedure :: print_t128_data => print_data
   end type t_141

contains
   subroutine test(this)
      class(t_141), intent(inout) :: this
      integer :: test_int = 0

      print *, 'This is a test'
      test_int = this%t141sharedata%fileunit
      print *, test_int
   end subroutine test

   subroutine exchange_share(this, fileunit, D_start_index, P_start_index)
      class(t_141), intent(inout) :: this
      integer(int32), intent(in) :: fileunit
      integer(int32), intent(in) :: D_start_index
      integer(int32), intent(in) :: P_start_index

      print *, fileunit, D_start_index, P_start_index
      print *
      print *, 'I am here'
      !print *, this%t141sharedata%fileunit
      !this%t141sharedata%fileunit = 0
      ! this%t141sharedata%fileunit = fileunit
      ! this%t141sharedata%D_section_start_index = D_start_index
      ! this%t141sharedata%P_section_start_index = P_start_index
   end subroutine exchange_share

   ! subroutine read_raw_data_T141(this)
   !    class(T141), intent(inout)  :: this
   !    allocate (this%Parameter_Data(this%n_PD_entries - 1))
   !    this%Parameter_Data = 0

   !    read (this%Raw_Parameter_Data, fmt=*) this%Type_ID, this%Parameter_Data
   !    this%TYPE_BS = this%Parameter_Data(1)
   !    this%PREF = this%Parameter_Data(2)
   !    this%SPTR = this%Parameter_Data(3)
   !    this%N = this%Parameter_Data(4)
   !    this%CRVPT_1 = this%Parameter_Data(5)
   !    this%SENSE_1 = this%Parameter_Data(6)
   !    this%K1 = this%Parameter_Data(7)
   !    !write(*,*) this%Parameter_Data
   ! end subroutine read_raw_data_T141

   ! subroutine test_type_T141(this)
   !    class(T141) :: this
   !    if (this%Type_ID == 141) then
   !       write (*, *) 'Parameter type to read in is 141, continuing...'
   !    else
   !       STOP 'ERROR: Parameter Type is not 141, see mod_T141.f90...'
   !    end if
   ! end subroutine test_type_T141

   ! subroutine index_calcs_T141(this)
   !    class(T141) :: this
   !    this%iPSCPT_1_1 = 8
   !    this%iPSCPT_1_K1 = (7 + this%K1)
   !    this%M = 12 + 3*(this%N - 1) + (this%K1) !DNH: See pg 160 of IGES manual for K1
   !    this%iCRVPT_N = (this%M)
   !    this%iSENSE_N = (1 + this%M)
   !    this%iK_N = (2 + this%M)
   !    this%iPSCPT_N_1 = (3 + this%M)
   !    this%iPSCPT_N_KN = (2 + this%K_N + this%M)
   ! end subroutine index_calcs_T141

   ! subroutine allocate_T141(this)
   !    class(T141) :: this
   !    this%n_PSCPT_1_K = (this%iPSCPT_1_K1 - this%iPSCPT_1_1 + 1)
   !    this%n_PSCPT_N_K = (this%iPSCPT_N_KN - this%iPSCPT_N_1 + 1)
   !    allocate (this%PSCPT_1_K(this%n_PSCPT_1_K))
   !    allocate (this%PSCPT_N_K(this%n_PSCPT_N_K))
   !    this%PSCPT_1_K = 0
   !    this%PSCPT_N_K = 0
   ! end subroutine allocate_T141

   ! subroutine read_param_data_T141(this)
   !    class(T141) :: this
   !    if (this%N > 1) then
   !       this%PSCPT_1_K = this%Parameter_Data(this%iPSCPT_1_1:this%iPSCPT_1_K1)
   !       this%CRVPT_N = this%Parameter_Data(this%iCRVPT_N)
   !       this%SENSE_N = this%Parameter_Data(this%iSENSE_N)
   !       this%K_N = this%Parameter_Data(this%iK_N)
   !       this%PSCPT_N_K = this%Parameter_Data(this%iPSCPT_N_1:this%iPSCPT_N_KN)
   !    else
   !       !write(*,*) 'this%N is < 2, nothing to do for read_param_data_T141'
   !    end if
   ! end subroutine read_param_data_T141

   ! subroutine evaluate_param_properties_T141(this)
   !    class(T141) :: this
   ! end subroutine evaluate_param_properties_T141

end module type_141
